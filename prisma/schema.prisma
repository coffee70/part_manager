// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  parts      Part[]

  @@index([customerId], name: "customerId")
}

model Customer {
  id        Int      @id @default(autoincrement())
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Part {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId    Int
  order      Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dimensions Dimension[]
  drawings   Drawing[]
  serials    Serial[]

  @@index([orderId], name: "orderId")
}

model Serial {
  id        Int      @id @default(autoincrement())
  number    String
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partId   Int
  part     Part    @relation(fields: [partId], references: [id], onDelete: Cascade)
  billetId Int?
  billet   Billet? @relation(fields: [billetId], references: [id], onDelete: SetNull)

  @@index([partId], name: "serial_partId")
  @@index([billetId], name: "billetId")
}

model Dimension {
  id        Int      @id @default(autoincrement())
  name      String
  unit      String
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partId Int
  part   Part @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId], name: "dimension_partId")
}

model Drawing {
  id        String   @id @default(uuid())
  file      String
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partId Int
  part   Part @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([partId], name: "drawing_partId")
}

model Batch {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billets Billet[]
}

model Billet {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batchId Int
  batch   Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  serials Serial[]

  @@index([batchId], name: "batchId")
}

model Bag {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id              Int          @id @default(autoincrement())
  label           String
  color           String
  resolved        Boolean
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  fromTransitions Transition[] @relation("FromStatus")
  toTransitions   Transition[] @relation("ToStatus")
}

model Transition {
  id        Int      @id @default(autoincrement())
  label     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromId Int
  from   Status @relation("FromStatus", fields: [fromId], references: [id])
  toId   Int
  to     Status @relation("ToStatus", fields: [toId], references: [id])
}
