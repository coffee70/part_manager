// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CustomerOrder {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fields             Json
  statusId           Int
  status             Status              @relation(fields: [statusId], references: [id])
  customerId         Int
  customer           Customer            @relation(fields: [customerId], references: [id])
  customerOrderParts CustomerOrderPart[]
  serials            Serial[]
  attachments        Attachment[]

  @@index([statusId], name: "customerOrder_statusId")
}

model ShopOrder {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fields Json

  statusId    Int
  status      Status       @relation(fields: [statusId], references: [id])
  serials     Serial[]
  attachments Attachment[]
}

model CustomerOrderPart {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerOrderId Int
  customerOrder   CustomerOrder @relation(fields: [customerOrderId], references: [id], onDelete: Cascade)
  partId          Int
  part            Part          @relation(fields: [partId], references: [id], onDelete: Cascade)

  @@index([customerOrderId], name: "customerOrderPart_customerOrderId")
  @@index([partId], name: "customerOrderPart_partId")
}

model Part {
  id        Int      @id @default(autoincrement())
  number    String   @unique
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fields Json

  statusId           Int
  status             Status              @relation(fields: [statusId], references: [id])
  customerOrderParts CustomerOrderPart[]
  serials            Serial[]
  attachments        Attachment[]
}

model Serial {
  id        Int      @id @default(autoincrement())
  number    String
  notes     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fields Json

  partId          Int
  part            Part          @relation(fields: [partId], references: [id], onDelete: Cascade)
  customerOrderId Int
  customerOrder   CustomerOrder @relation(fields: [customerOrderId], references: [id], onDelete: Cascade)
  shopOrderId     Int
  shopOrder       ShopOrder     @relation(fields: [shopOrderId], references: [id], onDelete: Cascade)
  statusId        Int
  status          Status        @relation(fields: [statusId], references: [id])
  attachments     Attachment[]

  @@index([partId], name: "serial_partId")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerOrders CustomerOrder[]
}

model Attachment {
  id       String @id @default(uuid())
  filename String

  serialId        Int?
  serial          Serial?        @relation(fields: [serialId], references: [id])
  partId          Int?
  part            Part?          @relation(fields: [partId], references: [id])
  shopOrderId     Int?
  shopOrder       ShopOrder?     @relation(fields: [shopOrderId], references: [id])
  customerOrderId Int?
  customerOrder   CustomerOrder? @relation(fields: [customerOrderId], references: [id])
}

enum StatusType {
  CUSTOMER_ORDER
  SHOP_ORDER
  PART
  SERIAL
}

model Status {
  id        Int        @id @default(autoincrement())
  label     String
  color     String
  resolved  Boolean
  type      StatusType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  fromTransitions Transition[]    @relation("FromStatus")
  toTransitions   Transition[]    @relation("ToStatus")
  customerOrders  CustomerOrder[]
  shopOrders      ShopOrder[]
  parts           Part[]
  serials         Serial[]
}

model Transition {
  id        Int      @id @default(autoincrement())
  label     String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromId Int
  from   Status @relation("FromStatus", fields: [fromId], references: [id])
  toId   Int
  to     Status @relation("ToStatus", fields: [toId], references: [id])
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  TIME
  SELECT
  PARAGRAPH
}

enum FieldModel {
  ORDER
  CUSTOMER
  PART
  SERIAL
  BATCH
  BILLET
  BAG
}

model Field {
  id        Int        @id @default(autoincrement())
  name      String
  model     FieldModel
  type      FieldType
  default   Json?
  options   Json?
  nullable  Boolean
  multiple  Boolean?
  creative  Boolean?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
